#
# File: %android-build.yml
#
#=============================================================================#
#
# The Android build of Ren-C is designed to be packaged as a webserver, so
# that it can provide a "backdoor" of native services to a browser on a phone
# which is running another interpreter as the WebAssembly version for the UI.
#
# https://www.youtube.com/watch?v=r5kccBehMMg
#
#====# PLEASE READ THE README #===============================================#
#
# Whenever this file says "See README", that is referring to the notes in the
# %.github/workflows/README.md file.  If something appears in multiple GitHub
# Workflow files, it's best to document it there instead of repeating it:
#
# https://github.com/metaeducation/ren-c/blob/master/.github/workflows/README.md
#

name: Android Build


# Controls when the action will run.  Currently we use the default to trigger
# the workflow on push or pull request events, but only for the master branch.
#
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  workflow_dispatch:  # Allows running this workflow manually from Actions tab


# Windows containers default to using PowerShell.  But you can use bash, and
# so we can potentially write code that works on Windows and MacOS hosts as
# well as Linux hosts in this single workflow.
#
# !!! Currently we're only testing cross-compilation on Linux and MacOS, but
# since the NDK is offered on Windows as well we should make sure that works
# when time permits.
#
defaults:
  run:
    shell: bash


# Each "Job" runs in its own VM, and a workflow run is made up of one or more
# jobs that can run sequentially or in parallel.
#
# See README: Jobs
#
jobs:
  android-build:  # Name of this workflow's only job


    # See README: Build Matrix
    #
    strategy:
      matrix:
       include:  # put in order of visibility importance (shown in UI)

#         - ndk-revision: r13  # old gcc-based version (used in 2019 demo)
#           os: ubuntu-20.04
#           standard: c99
#           debug: normal
#           extensions: ""
#           os-id: 0.13.2
#           config-file: android-cross-compiled.r  # Build ARM with x64 compiler

         - ndk-revision: r21d  # clang-based version (circa March 2021)
           os: macos-latest
           standard: c99
           debug: normal
           extensions: ""
           os-id: 0.13.2
           config-file: android-cross-compiled.r  # Build ARM with x64 compiler


    # The env context declares environment variables in a way they can also be
    # used in places that aren't shell code, e.g. an `if:` clause.
    #
    # See README: Environment Variables
    #
    env:
      AWS_S3_BUCKET_NAME: metaeducation
      NDK_REVISION: ${{ matrix.ndk-revision }}
      STANDARD: ${{ matrix.standard }}
      DEBUG: ${{ matrix.debug }}
      EXTENSIONS: ${{ matrix.extensions }}
      OS_ID: ${{ matrix.os-id }}
      CONFIG_FILE: ${{ matrix.config-file }}

      # If you override one emulator option with the emulator GitHub Action,
      # you have to override them all.
      #
      # An important choice is to take off the `-no-snapshot` switch, because
      # we want to run multiple invocations of the emulator action.  We don't
      # want it to cold boot between these invocations, so letting it save
      # its state makes the startup much faster.
      #
      # We also add `-writable-system`, so that if you use adb shell to run
      # `sudo root; sudo remount` then %/system will be writable.  This isn't
      # critical at the moment since we can write to `/data/local/tmp`, which
      # is apparently the preferred place for writing test files.  But it may
      # come in handy at some point.
      #
      # https://github.com/ReactiveCircus/android-emulator-runner
      #
      EMULATOR_OPTIONS: >-  # see README: YAML >- To Make One Line From Many
          -no-window
          -gpu swiftshader_indirect
          -noaudio
          -no-boot-anim
          -writable-system

      # Google has deprecated the emulation of ARM Android hardware on the
      # desktop emulator application itself.  Instead, x86-based Androids
      # actually do the translation of ARM binaries...and then the emulator
      # can run x86 Android on top of the (often) x86 host processor.  But
      # that translation started in Android 11 with API Level 30.  If you go
      # back to API level 29, an ARM binary won't be handled and you will
      # get a message like:
      #
      #    /data/local/tmp/r3: not executable: 32-bit ELF file
      #
      # https://github.com/ReactiveCircus/android-emulator-runner
      #
      EMULATOR_API_LEVEL: 30

      # The host is OS X 64-bit, so that raises the question of whether it's
      # better to emulate an x86 or x86_64 device:
      #
      #        x86 boot time: 214147 ms
      #     x86_64 boot time: 201991 ms
      #
      # A little faster to go with x86_64, but not so much that it would be
      # a big deal if some bug on x86_64 emulation forced us back to x86.
      #
      # https://github.com/ReactiveCircus/android-emulator-runner
      #
      EMULATOR_ARCH: x86_64  # [x86 x86_64]

      # Since we need at least API level 30 for ARM translation, we find that
      # here is no `default` x86 or x86_64 image for android-30.  The only
      # entries in `sdkmanager --list` are these four:
      #
      #    system-images;android-30;google_apis;x86
      #    system-images;android-30;google_apis;x86_64
      #    system-images;android-30;google_apis_playstore;x86
      #    system-images;android-30;google_apis_playstore;x86_64
      #
      # Presumably Google just no longer feels it worth it the hassle of
      # having separately downloadable Androids without things like their
      # Maps components and such (because storage is cheap?)
      #
      # https://github.com/ReactiveCircus/android-emulator-runner
      #
      EMULATOR_TARGET: google_apis  # [default google_apis playstore]


    # The type of runner that the job will run on.  Options listed here:
    #
    # https://github.com/actions/virtual-environments#available-environments
    #
    runs-on: ${{ matrix.os }}


    # Steps are a sequence of tasks that will be executed within a single VM
    # as part of the job.
    #
    # See README: Steps
    #
    steps:  # (no indentatation needed below; so indent the minimum!)


  #====# FRONTLOAD EMULATOR TINKERING #=======================================#

    # !!! While trying to see if the emulator can get to work, cut to the chase
    # with a premade android executable.


    - name: Grab an r3 Android Built Recently
      run: |
        curl http://hostilefork.com/media/shared/android/r3-android29-mar-2021 -o r3


    # https://github.com/ReactiveCircus/android-emulator-runner
    #
    # Starting and stopping the emulator is extremely slow.  The first time
    # is always a "cold boot", and takes about 201 seconds to start.  If you
    # don't set the `-no-snapshot` emulator option then subsequent startups
    # can be around 152 seconds.
    #
    # Given how slow it is, we try to do as much as we can in one emulator
    # session.  The way the emulator-runner works is that it runs the commands
    # line-by-line, and any of them that return a non-zero result will stop the
    # whole step.  Output printed to standard output in the android executable
    # will be relayed back by `adb shell` so it can be read in the output log.
    #
    # See README: !!! IMPORTANT - Untrusted Actions, Use Audited Hash !!!
    #
    - name: Poke R3 Executable Into Android Emulator And Run Commands
      uses: hostilefork/android-emulator-runner@dont-wrap-script
      env:
        R3-ARM: adb shell /data/local/tmp/r3
      with:
        api-level: ${{ env.EMULATOR_API_LEVEL }}
        arch: ${{ env.EMULATOR_ARCH }}
        target: ${{ env.EMULATOR_TARGET }}
        emulator-options: ${{ env.EMULATOR_OPTIONS }}
        #
        # The script must backslash escape single and double quotes.  (This is
        # true if you call `adb shell` on Linux and Windows, not just here on
        # the headless test device.)
        #
        script: |
          adb push ./r3 /data/local/tmp/r3
          adb shell chmod +x /data/local/tmp/r3

          $R3-ARM --do \"print [{Hello} \'World]\"
          $R3-ARM --do \"print mold/limit as text read https://example.com\"


  #====# BUILD STEPS #========================================================#

    # We build both pull requests and commits to master.  So the build steps
    # are run unconditionally (no `if:` qualifiers)


    # https://github.com/actions/checkout
    #
    # See README: Checkout Action
    # See README: IMPORTANT - Security Of Trusted Actions
    #
    - uses: actions/checkout@v2


    - name: Fetch R3 To Use For "Prep" Build Steps as $R3MAKE (OS X version)
      if: matrix.os == 'macos-latest'  # not `${{ matrix.os }} == ...`
      run: |
        echo "OS is ${{ matrix.os }}"
        repo_dir=$(pwd)/
        source tools/bash/fetch-prebuilt.sh
        r3make=$(fetch_prebuilt)
        echo "R3MAKE is set to $r3make"
        echo "R3MAKE=$r3make" >> $GITHUB_ENV  # pass to next step


    # !!! Ideally this would use the same step that clients can use to build
    # the system with `make.sh`.  Unfortunately, something about the GitHub
    # Ubuntus do not like the old bootstrap executable.  Make sure the
    # ordinary path works, but for the moment patch over it just to get
    # to a point where the action works.
    #
    # See README: If Statements
    #
    - name: Fetch R3 To Use For "Prep" Build Steps as $R3MAKE (Linux version)
      if: matrix.os == 'ubuntu-20.04'  # not `${{ matrix.os }} == ...`
      run: |
        echo "OS is ${{ matrix.os }}"
        repo_dir=$(pwd)/
        cd prebuilt
        wget http://hostilefork.com/media/shared/github/r3-linux-dec-2020
        chmod +x r3-linux-dec-2020
        r3make=$(pwd)/r3-linux-dec-2020
        echo "R3MAKE is set to $r3make"
        echo "R3MAKE=$r3make" >> $GITHUB_ENV  # pass to next step


    # Test to make sure the R3-MAKE works, because otherwise everything else
    # is wasting time...the build won't run.  GitHub checks the run result
    # and will stop the workflow if it's not 0.
    #
    - name: "Sanity check that R3-MAKE is Working"
      run: |
        "$R3MAKE" --do "print {Hello from R3-MAKE} quit 0"


    # Building for Android requires having a compiler that can build for ARM,
    # as well as support for the "Bionic" OS (distinct from the Linux that this
    # container is running on, so the /usr/include and /usr/lib files wouldn't
    # be usable in the compilation process).
    #
    # https://github.com/nttld/setup-ndk
    #
    # There is a known layout to the folders, so the Android config can find
    # the compiler relative to the ANDROID_NDK_ROOT installation path.
    #
    # Android [r]evisions (e.g. r13, r21d) are described in this history list:
    #
    # https://developer.android.com/ndk/downloads/revision_history
    #
    # See README: !!! IMPORTANT - Untrusted Actions, Use Audited Hash !!!
    #
    - name: Install the Android NDK (Native Development Kit)
      id: setup-ndk
      uses: nttld/setup-ndk@66168bc2be149f117859da845149dee8b763e6c9
      with:
        ndk-version: ${{ matrix.ndk-revision }}


    # To find out where the `setup-ndk` action installed the NDK, you have to
    # look at the output variables for that step.
    #
    # There is no "official" standard environment variable for the C/C++ NDK.
    # But the Java SDK has one that the command line tools look for, and it's
    # ANDROID_SDK_ROOT.  So we use ANDROID_NDK_ROOT for consistency, and since
    # simply NDK or ANDROID_NDK don't communicate well that it's a directory
    # (could be a flag, could be a version number, etc.)
    #
    # See README: Environment Variables
    #
    - name: Set ANDROID_NDK_ROOT Environment Variable
      run: |
        echo "ANDROID_NDK_ROOT=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV


    # Show a little bit of sanity check information.
    #
    # !!! Here is where we would usually do something like `gcc -v` to get
    # some diagnostic information about the compiler.  However, it's convoluted
    # to figure out whether gcc (old) or clang (new) are used in the NDK, and
    # that logic and version detection is in the %android-cross-compiled.r so
    # there's not much point in duplicating that here in bash.
    #
    - name: Output System Information
      run: |
        echo "Installed NDK Version: $ANDROID_NDK_VERSION"
        echo "NDK Is In Directory: $ANDROID_NDK_ROOT"

        echo "Current directory is: $(pwd)"


    # Grab abbreviated and full git commit ID into environment variables.
    # The full commit is passed to make to build into the binary, and the
    # abbreviated commit is used to name the executable.
    #
    # See README: Portably Capturing Git Hashes
    #
    - name: Grab Git Hash and Short Hash Into Environment Variables
      run: |
        git_commit="$(git show --format="%H" --no-patch)"
        echo "git_commit is $git_commit"
        git_commit_short="$(git show --format="%h" --no-patch)"
        echo "git_commit_short is $git_commit_short"
        echo "GIT_COMMIT=$git_commit" >> $GITHUB_ENV
        echo "GIT_COMMIT_SHORT=$git_commit_short" >> $GITHUB_ENV


    # We are able to use either the makefile version of the build or the
    # fully Ren-C driven form with CALL.  Both should be tested, but right
    # now this is using the makefile version.
    #
    - name: Build Using The NDK
      run: |
        mkdir build
        cd build

        # !!! optimization is currently hardcoded in the web build config
        # files as `s`.  Review if `z` would be better (it cannot be passed
        # in the options here at time of writing, and would be ignored even
        # if it could be due to that ldflags config hardcoding).
        #
        # NOTE: The GIT_COMMIT must be in {} not just "" that the shell might
        # get rid of.  Or you get weird bugs when the hex starts with numbers
        # and doesn't make a WORD!.  Frustrating to debug because each
        # diagnostic changes the hash to maybe a WORD!
        #
        "$R3MAKE" ../make.r \
            config=../configs/${{ matrix.config-file }} \
            target=makefile \
            standard=${{ matrix.standard }} \
            os_id=$OS_ID \
            debug=${{ matrix.debug }} \
            git_commit="{$GIT_COMMIT}" \
            rigorous=no \
            static=no \
            extensions=${{ matrix.extensions }}

        make prep
        make folders
        make


  #====# TESTING STEPS #======================================================#


    # https://github.com/ReactiveCircus/android-emulator-runner
    #
    # See README: !!! IMPORTANT - Untrusted Actions, Use Audited Hash !!!
    #
    - name: Run Android Emulator
      uses: reactivecircus/android-emulator-runner@d2799957d660add41c61a5103e2fbb9e2889eb73
      with:
        api-level: 29
        emulator-options: -writable-system
        script: |  # try comments after proven to work
          echo "TBD"
